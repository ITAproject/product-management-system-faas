# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: jernej10
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: faas
service: product-management-system

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    PRODUCTS_TABLE: ${self:service}-products
    JWT_SECRET: secret

plugins:
  - serverless-offline
  - serverless-localstack

custom:
  localstack:
    stages:
      - local

functions:
  login:
    handler: handler.login
    events:
      - http:
          path: /login
          method: post
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true

  getProducts:
    handler: handler.getProducts
    events:
      - http:
          path: /products
          method: get
          cors: true

  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true

  updateProduct:
    handler: handler.updateProduct
    events:
      - http:
          path: /products/{id}
          method: put
          cors: true

  deleteProduct:
    handler: handler.deleteProduct
    events:
      - http:
          path: /products/{id}
          method: delete
          cors: true

  scheduledTask:
    handler: handler.scheduledTask
    events:
      - schedule:
          rate: rate(5 minutes)

    processProductChanges:
      handler: handler.processProductChanges
      events:
        - stream:
            type: dynamodb
            arn:
              Fn::GetAtt:
                - ProductsDynamoDBTable
                - StreamArn

    handleSnsNotification:
      handler: handler.handleSnsNotification
      events:
        - sns: productNotification

    sendProductsSummary:
      handler: handler.sendProductsSummary
      events:
        - schedule: rate(1 day)

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    EventNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: productNotification
